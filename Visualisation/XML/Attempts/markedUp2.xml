<?xml version="1.0" encoding="UTF-8"?>
<article>
    <title>Language Wars – <evidence type='experience' specific-type='named-entity'>Joel</evidence> on <evidence type='experience' specific-type='named-entity'>Software</evidence>
    </title>
    <evidence type='experience' specific-type='named-entity'>Skip</evidence> to <evidence type='experience' specific-type='verb-events'>content</evidence> * View menu * View sidebar
    <evidence type='experience' specific-type='named-entity'>Joel</evidence> on <evidence type='experience' specific-type='named-entity'>Software</evidence>
Your host
I’m <evidence type='experience' specific-type='named-entity'>Joel</evidence>
    <evidence type='experience' specific-type='named-entity'>Spolsky</evidence>, a <evidence type='experience' specific-type='named-entity'>Software</evidence> developer in New York <evidence type='experience' specific-type='named-entity'>City</evidence>. More about me. 
    <evidence type='experience' specific-type='verb-events'>Read</evidence> the archives in dead-tree format!
Many of these articles <evidence type='experience' specific-type='verb-events'>have</evidence> been collected into four books, available at <evidence type='experience' specific-type='pronoun'>your</evidence> favorite bookstore. 
It’s an excellent way to read the site in the bath, or <evidence type='experience' specific-type='verb-events'>throw</evidence> it at <evidence type='experience' specific-type='pronoun'>your</evidence> boss.
Careers
Ready to level up? <evidence type='experience' specific-type='named-entity'>Stack</evidence>
    <evidence type='experience' specific-type='named-entity'>Overflow</evidence> Jobs is the job site that puts the needs of developers first. 
Whether <evidence type='experience' specific-type='pronoun'>you</evidence> want to <evidence type='experience' specific-type='verb-events'>take</evidence> control of <evidence type='experience' specific-type='pronoun'>your</evidence> search or <evidence type='experience' specific-type='verb-events'>let</evidence> employers <evidence type='experience' specific-type='verb-events'>discover</evidence>
    <evidence type='experience' specific-type='pronoun'>you</evidence>, we’re on a mission to <evidence type='experience' specific-type='verb-events'>help</evidence> every developer <evidence type='experience' specific-type='verb-events'>find</evidence> a job <evidence type='experience' specific-type='pronoun'>they</evidence> love. 
    <evidence type='experience' specific-type='verb-events'>Looking</evidence> to <evidence type='experience' specific-type='verb-events'>hire</evidence> smart programmers who <evidence type='experience' specific-type='verb-events'>get</evidence> things done? <evidence type='experience' specific-type='named-entity'>Stack</evidence>
    <evidence type='experience' specific-type='named-entity'>Overflow</evidence> Talent is a fully-customized sourcing solution that helps <evidence type='experience' specific-type='pronoun'>you</evidence>
    <evidence type='experience' specific-type='verb-events'>understand</evidence>, reach, and attract developers on the platform <evidence type='experience' specific-type='pronoun'>they</evidence> trust most. 
    <evidence type='experience' specific-type='verb-events'>find</evidence> the right candidates for <evidence type='experience' specific-type='pronoun'>your</evidence> jobs. 
    <evidence type='experience' specific-type='verb-events'>learn</evidence> more. 
For <evidence type='experience'>my</evidence> day job, I'm the co-founder and CEO of <evidence type='experience' specific-type='named-entity'>Stack</evidence>
    <evidence type='experience' specific-type='named-entity'>Overflow</evidence>, the largest online community for programmers to <evidence type='experience' specific-type='verb-events'>learn</evidence>, share <evidence type='experience' specific-type='pronoun'>their</evidence> knowledge, and level up. 
Each month, more than 40 million professional and <evidence type='experience' specific-type='verb-events'>aspiring</evidence> programmers visit <evidence type='experience' specific-type='named-entity'>Stack</evidence>
    <evidence type='experience' specific-type='named-entity'>Overflow</evidence> to <evidence type='experience' specific-type='verb-events'>
    <evidence type='experience' specific-type='verb-events'>ask</evidence>
</evidence> and <evidence type='experience' specific-type='verb-events'>answer</evidence> questions and <evidence type='experience' specific-type='verb-events'>find</evidence> better jobs. 
<evidence type='experience' specific-type='named-entity'>Stack</evidence>
<evidence type='experience' specific-type='named-entity'>Overflow</evidence> is also the flagship site of the <evidence type='experience' specific-type='named-entity'>Stack</evidence> Exchange network, 160+ question and <evidence type='experience' specific-type='verb-events'>answer</evidence> sites dedicated to all kinds of topics from <evidence type='experience' specific-type='verb-events'>cooking</evidence> to <evidence type='experience' specific-type='verb-events'>gaming</evidence>. 
<evidence type='experience' specific-type='verb-events'>According</evidence> to Quantcast, <evidence type='experience' specific-type='named-entity'>Stack</evidence>
<evidence type='experience' specific-type='named-entity'>Overflow</evidence> is the 30th largest web property in the <evidence type='experience' specific-type='named-entity'>United States</evidence> and in the top 100 in the world. 
<evidence type='experience'>I</evidence> also <evidence type='experience' specific-type='verb-events'>founded</evidence><evidence type='experience' specific-type='named-entity'>Fog Creek</evidence><evidence type='experience' specific-type='named-entity'>Software</evidence>, one of the most influential small tech companies in the world. 
As an independent, privately-owned company, we’ve been <evidence type='experience' specific-type='verb-events'>making</evidence> customers happy <evidence type='experience' specific-type='timex-events'>since</evidence> the turn of the century. 
We share what we've learned about how to <evidence type='experience' specific-type='verb-events'>make</evidence> great <evidence type='experience' specific-type='named-entity'>Software</evidence>, both by <evidence type='experience' specific-type='verb-events'>writing</evidence> about <evidence type='experience'>our</evidence> ideas and by <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>creating</evidence></evidence> products, like <evidence type='experience' specific-type='named-entity'>FogBugz</evidence>, Trello and Gomix, that <evidence type='experience' specific-type='verb-events'>help</evidence> others <evidence type='experience' specific-type='verb-events'>make</evidence> great technology. 
    <argumentation type='reasoning'>As a result</argumentation>,        <evidence type='experience' specific-type='named-entity'>Fog Creek</evidence>'s impact on the world of developers rivals companies a thousand times <evidence type='experience'>our</evidence> size.
Twitter! Twitter!
My Tweets September 1, 2006 by <evidence type='experience' specific-type='named-entity'>Joel</evidence><evidence type='experience' specific-type='named-entity'>Spolsky</evidence>
Language Wars
* News An old friend <evidence type='experience' specific-type='verb-events'>emailed</evidence><evidence type='experience'>me</evidence> to <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>ask</evidence></evidence>: “I <evidence type='experience' specific-type='verb-events'>wanted</evidence> to <evidence type='experience' specific-type='verb-events'>get</evidence><evidence type='experience' specific-type='pronoun'>your</evidence> response to some <evidence type='experience' specific-type='named-entity'>Basic</evidence> questions <evidence type='experience' specific-type='verb-events'>concerning</evidence> technologies available for <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>creating</evidence></evidence> an enterprise level application that is built upon a Web <evidence type='experience' specific-type='named-entity'>Server</evidence>, Web based applications, and a large distribution model and collection model. 
The project is <evidence type='experience' specific-type='verb-events'>starting</evidence> from scratch and so there is no legacy code involved but other than that <evidence type='experience'>I</evidence> won’t bore <evidence type='experience' specific-type='pronoun'>you</evidence> with the details… “Would you head down the .NET route or J2EE? “Which Web <evidence type='experience' specific-type='named-entity'>Server</evidence> (<evidence type='experience' specific-type='named-entity'>Apache</evidence>, <evidence type='experience' specific-type='named-entity'>IIS</evidence>, or something else) should <evidence type='experience'>we</evidence>
<evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>use/evidence></evidence> and why? “Which Web development language (ASP.NET, <evidence type='experience' specific-type='named-entity'>Ruby</evidence>, <evidence type='experience' specific-type='named-entity'>Ruby</evidence> on <evidence type='experience' specific-type='named-entity'>Rails</evidence>, <evidence type='experience' specific-type='named-entity'>Java</evidence>, Python, etc.) would <evidence type='experience' specific-type='pronoun'>you</evidence><evidence type='experience' specific-type='verb-events'>recommend</evidence> and why? “What <evidence type='experience' specific-type='verb-events'>do</evidence> you <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>use/evidence></evidence> at <evidence type='experience' specific-type='pronoun'>your</evidence> company and why?” Ah, an excellent question, simultaneously impossible to <evidence type='experience' specific-type='verb-events'>answer</evidence> and very easy to <evidence type='experience' specific-type='verb-events'>answer</evidence>! 
Sorry, <evidence type='experience'>I</evidence> should <evidence type='experience' specific-type='verb-events'>stop</evidence> speaking in riddles. 
A while ago <evidence type='experience'>I</evidence>
<evidence type='experience' specific-type='verb-events'>wrote</evidence> an article called Lord <evidence type='experience' specific-type='named-entity'>Palmerston</evidence> on <evidence type='experience' specific-type='verb-events'>Programming</evidence> in which <evidence type='experience'>I</evidence>
<evidence type='experience' specific-type='verb-events'>claimed</evidence> that some of these <evidence type='experience' specific-type='verb-events'>programming</evidence> worlds, like .NET and <evidence type='experience' specific-type='named-entity'>Java</evidence>, <evidence type='experience' specific-type='verb-events'>were</evidence> so huge and <evidence type='experience' specific-type='verb-events'>complicated</evidence> that you never could really <evidence type='experience' specific-type='verb-events'>tell</evidence> if <evidence type='experience' specific-type='pronoun'>they</evidence><evidence type='experience' specific-type='verb-events'>were</evidence><evidence type='experience' specific-type='verb-events'>going</evidence> to <evidence type='experience' specific-type='verb-events'>be</evidence> good enough for <evidence type='experience' specific-type='pronoun'>your</evidence> needs until it <evidence type='experience' specific-type='verb-events'>was</evidence> too late. 
In particular, a <evidence type='experience' specific-type='verb-events'>debate</evidence> between the C#/.NET/<evidence type='experience' specific-type='named-entity'>IIS</evidence><evidence type='experience' specific-type='named-entity'>Stack</evidence> and the <evidence type='experience' specific-type='named-entity'>Java</evidence>/J2EE/<evidence type='experience' specific-type='named-entity'>Apache</evidence>/Solaris <evidence type='experience' specific-type='named-entity'>Stack</evidence> and the <evidence type='experience' specific-type='named-entity'>PHP</evidence>/<evidence type='experience' specific-type='named-entity'>Apache</evidence>/Linux <evidence type='experience' specific-type='named-entity'>Stack</evidence> could <evidence type='experience' specific-type='verb-events'>go</evidence> on and on for years and years and you’d never <evidence type='experience' specific-type='verb-events'>find</evidence> the right <evidence type='experience' specific-type='verb-events'>answer</evidence>. 
That’s <argumentation type="reasoning">because</argumentation> there are so many pros and cons of all these platforms that advocates of each side can <evidence type=“'experience' specific-type='verb-events'>debate</evidence> and <evidence type='experience' specific-type='verb-events'>debate</evidence> and never <evidence type='experience' specific-type='verb-events'>get</evidence> any closer to the Truth, but it sure as heck is a fun <evidence type='experience' specific-type='verb-events'>debate</evidence>. 
    <evidence type='experience' specific-type='pronoun'>You</evidence> might <evidence type='experience' specific-type='verb-events'>think</evidence> that if <evidence type='experience' specific-type='pronoun'>you</evidence> could <evidence type='experience' specific-type='verb-events'>find</evidence> someone with extensive <evidence type='experience'>experience</evidence> in multiple platforms, <evidence type='experience' specific-type='pronoun'>they</evidence> would <evidence type='experience' specific-type='verb-events'>be</evidence> the right person to <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>ask</evidence></evidence>. 
    <evidence type='experience'>I</evidence> haven’t <evidence type='experience' specific-type='verb-events'>found</evidence> a lot of people like that. What <evidence type='experience'>I</evidence>
<evidence type='experience' specific-type='verb-events'>do</evidence><evidence type='experience' specific-type='verb-events'>know</evidence> for sure, <argumentation type='reasoning'>though<.argumentation>, is two things: * People all over the world are constantly <evidence type='experience' specific-type='verb-events'>building</evidence> web applications <evidence type='experience' specific-type='verb-events'>using</evidence> .NET, <evidence type='experience' specific-type='verb-events'>using</evidence><evidence type='experience' specific-type='named-entity'>Java</evidence>, and <evidence type='experience' specific-type='verb-events'>using</evidence><evidence type='experience' specific-type='named-entity'>PHP</evidence> all the time. 
None of them are <evidence type='experience' specific-type='verb-events'>failing</evidence><argumentation type='reasoning'>because</argumentation> of the choice of technology. 
* All of these environments are large and complex and <evidence type='experience' specific-type='pronoun'>you</evidence> really <evidence type='experience' specific-type='verb-events'>need</evidence> at least one architect with serious <evidence type='experience'>experience</evidence>
    <evidence type='experience' specific-type='verb-events'>developing</evidence> for the one <evidence type='experience' specific-type='pronoun'>you</evidence> choose, because<argumentation type='reasoning'>otherwise</argumentation> you’ll <evidence type='experience' specific-type='verb-events'>do</evidence> things wrong and <evidence type='experience' specific-type='verb-events'>wind</evidence> up with messy code that needs to <evidence type='experience' specific-type='verb-events'>be</evidence> restructured. 
Last summer <evidence type='experience' specific-type='timex-events'>when</evidence>
<evidence type='experience'>we</evidence>
    <evidence type='experience' specific-type='verb-events'>had</evidence> a group of interns <evidence type='experience' specific-type='verb-events'>build</evidence><evidence type='experience' specific-type='named-entity'>Copilot</evidence>, <evidence type='experience'>we</evidence>
    <evidence type='experience' specific-type='verb-events'>had</evidence> to <evidence type='experience' specific-type='verb-events'>decide</evidence>/evidence> what language to <evidence type='experience' specific-type='verb-events'>use</evidence> for new code. 
    <evidence type='experience'>I</evidence>
    <evidence type='experience' specific-type='verb-events'>know</evidence> that typically on new projects there’s a long evaluation period where you <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>decide</evidence>/evidence> what technology to <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>use/evidence></evidence>, along with lots of debates that include some crazy person actually <evidence type='experience' specific-type='verb-events'>wasting</evidence> quite a lot of time <evidence type='experience' specific-type='verb-events'>evaluating</evidence><evidence type='experience' specific-type='named-entity'>Sqeak</evidence> and <evidence type='experience' specific-type='named-entity'>Lisp</evidence> and OCaml and lots of other languages which are totally, truly brilliant <evidence type='experience' specific-type='verb-events'>programming</evidence> languages worthy of great praise, but just don’t <evidence type='experience' specific-type='verb-events'>have</evidence> the gigantic ecosystem <evidence type='experience' specific-type='pronoun'>you</evidence><evidence type='experience' specific-type='verb-events'>need</evidence> around them if <evidence type='experience' specific-type='pronoun'>you</evidence> want to <evidence type='experience' specific-type='verb-events'>develop</evidence> web <evidence type='experience' specific-type='named-entity'>Software</evidence>. 
These debates are enormously fun and a total and utter waste of time, <argumentation type="reasoning">because<argumentation> the bottom line is that there are three and a half platforms (C#, <evidence type='experience' specific-type='named-entity'>Java</evidence>, <evidence type='experience' specific-type='named-entity'>PHP</evidence>, and a half Python) that are all equally likely to <evidence type='experience' specific-type='verb-events'>make</evidence> you successful, an infinity of platforms where you’re pretty much guaranteed to <evidence type='experience' specific-type='verb-events'>fail</evidence> spectacularly <evidence type='experience' specific-type='timex-events'>when</evidence> it’s too late to <evidence type='experience' specific-type='verb-events'>change</evidence> anything (<evidence type='experience' specific-type='named-entity'>Lisp</evidence>, ISAPI DLLs written in C, Perl), and a handful of platforms where The Jury Is Not In, So Why <evidence type='experience' specific-type='verb-events'>Take</evidence> The <evidence type='experience' specific-type='verb-events'>Risk</evidence><evidence type='experience' specific-type='timex-events'>when</evidence>
<evidence type='experience' specific-type='pronoun'>Your</evidence> Job Is On The Line? (<evidence type='experience' specific-type='named-entity'>Ruby</evidence> on <evidence type='experience' specific-type='named-entity'>Rails</evidence>). 
Before you flame me, <evidence type='experience' specific-type='named-entity'>Ruby</evidence> is a beautiful language and I’m sure you can <evidence type='experience' specific-type='verb-events'>have</evidence> a lot of fun <evidence type='experience' specific-type='verb-events'>developing</evidence> apps it in, and in fact if you want to <evidence type='experience' specific-type='verb-events'>do</evidence> something non-mission-critical, I’m sure you’ll <evidence type='experience' specific-type='verb-events'>have</evidence> a lot of fun, but for Serious <evidence type='experience' specific-type='named-entity'>Business</evidence> Stuff <evidence type='experience' specific-type='pronoun'>you</evidence> really must <evidence type='experience' specific-type='verb-events'>recognize</evidence> that there just isn’t a lot of <evidence type='experience'>experience</evidence> in the world <evidence type='experience' specific-type='verb-events'>building</evidence> big mission critical web systems in <evidence type='experience' specific-type='named-entity'>Ruby</evidence> on <evidence type='experience' specific-type='named-entity'>Rails</evidence>, and I’m really not sure that <evidence type='experience' specific-type='pronoun'>you</evidence> won’t <evidence type='experience' specific-type='verb-events'>hit</evidence><evidence type='experience' specific-type='verb-events'>scaling</evidence> problems, or problems <evidence type='experience' specific-type='verb-events'>interfacing</evidence> with some old legacy thingamabob, or problems <evidence type='experience' specific-type='verb-events'>finding</evidence> programmers who can <evidence type='experience' specific-type='verb-events'>understand</evidence> the code, or whatnot. 
So while <evidence type='experience' specific-type='named-entity'>Ruby</evidence> on <evidence type='experience' specific-type='named-entity'>Rails</evidence> is the fun <evidence type='experience' specific-type='verb-events'>answer</evidence> and <evidence type='experience' specific-type='verb-events'>yes</evidence> I’ve heard of 37 Signals and they’re <evidence type='experience' specific-type='verb-events'>making</evidence> lovely <evidence type='experience' specific-type='named-entity'>Ruby</evidence> on <evidence type='experience' specific-type='named-entity'>Rails</evidence> apps, and <evidence type='experience' specific-type='verb-events'>making</evidence> lots of money, but that’s not a safe choice for at least another year or six. 
    <evidence type='experience'>I</evidence> for one am scared of <evidence type='experience' specific-type='named-entity'>Ruby</evidence><argumentation type="reasoning">because</argumentation> (1) it displays a stunning antipathy towards <evidence type='experience' specific-type='named-entity'>Unicode</evidence> and (2) it’s known to <evidence type='experience' specific-type='verb-events'>be</evidence> slow, so if <evidence type='experience' specific-type='pronoun'>you</evidence> become The Next <evidence type='experience' specific-type='named-entity'>Myspace</evidence>, you’ll <evidence type='experience' specific-type='verb-events'>be</evidence><evidence type='experience' specific-type='verb-events'>buying</evidence> 5 times as many boxes as the .NET guy down the hall. 
Those things might eventually <evidence type='experience' specific-type='verb-events'>get</evidence> fixed but for now, <evidence type='experience' specific-type='pronoun'>you</evidence> can <evidence type='experience' specific-type='verb-events'>risk</evidence><evidence type='experience' specific-type='named-entity'>Ruby</evidence> on <evidence type='experience' specific-type='pronoun'>your</evidence> two-person dormroom startup or <evidence type='experience' specific-type='pronoun'>your</evidence> senior project, not for enterprisy stuff where Someone is <evidence type='experience' specific-type='verb-events'>going</evidence> to <evidence type='experience' specific-type='verb-events'>get</evidence> Fired. 
Python <evidence type='experience' specific-type='verb-events'>get</evidence> a half <argumentation type="reasoning">because</argumentation> it’s on the border, about to <evidence type='experience' specific-type='verb-events'>cross</evidence> the line from an “interesting” choice to a “safe” choice. 
Oh and <evidence type='experience'>I</evidence>
        <evidence type='experience' specific-type='verb-events'>know</evidence><evidence type='experience' specific-type='named-entity'>Paul</evidence><evidence type='experience' specific-type='verb-events'>told</evidence><evidence type='experience' specific-type='pronoun'>you</evidence> that he <evidence type='experience' specific-type='verb-events'>made</evidence> his app in <evidence type='experience' specific-type='named-entity'>Lisp</evidence> and then he <evidence type='experience' specific-type='verb-events'>made</evidence> millions of dollars <argumentation type="reasoning">because</argumentation> he <evidence type='experience' specific-type='verb-events'>made</evidence> his app in <evidence type='experience' specific-type='named-entity'>Lisp</evidence>, but honestly only two people ever <evidence type='experience' specific-type='verb-events'>believed</evidence> him and, a complete rewrite later, <evidence type='experience' specific-type='pronoun'>they</evidence> won’t <evidence type='experience' specific-type='verb-events'>make</evidence> that mistake again. 
The safe <evidence type='experience' specific-type='verb-events'>answer</evidence>, for the Big Enterprisy Thing where <evidence type='experience' specific-type='pronoun'>you</evidence><evidence type='experience' specific-type='verb-events'>have</evidence> no interest in being on the cutting edge, is C#, <evidence type='experience' specific-type='named-entity'>Java</evidence>, <evidence type='experience' specific-type='named-entity'>PHP</evidence>, or Python, since there’s so much evidence that <evidence type='experience' specific-type='timex-events'>when</evidence> it comes right down to it zillions of people are <evidence type='experience' specific-type='verb-events'>building</evidence> huge <evidence type='experience' specific-type='named-entity'>Business</evidence>-critical things in those languages and while <evidence type='experience' specific-type='pronoun'>they</evidence> may <evidence type='experience' specific-type='verb-events'>have</evidence> problems, they’re not life-threatening problems. 
How <evidence type='experience' specific-type='verb-events'>do</evidence> you <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>decide</evidence>/evidence> between C#, <evidence type='experience' specific-type='named-entity'>Java</evidence>, <evidence type='experience' specific-type='named-entity'>PHP</evidence>, and Python? The only real difference is which one <evidence type='experience' specific-type='pronoun'>you</evidence><evidence type='experience' specific-type='verb-events'>know</evidence> better. 
If you <evidence type='experience' specific-type='verb-events'>have</evidence> a serious <evidence type='experience' specific-type='named-entity'>Java</evidence> guru on <evidence type='experience' specific-type='pronoun'>your</evidence> team who has <evidence type='experience' specific-type='verb-events'>build</evidence> several large systems successfully with <evidence type='experience' specific-type='named-entity'>Java</evidence>, you’re <evidence type='experience' specific-type='verb-events'>going</evidence> to <evidence type='experience' specific-type='verb-events'>be</evidence> a hell of a lot more successful with <evidence type='experience' specific-type='named-entity'>Java</evidence> than with C#, not <argumentation type="reasoning">because</argumentation>
        <evidence type='experience' specific-type='verb-events'>Java</evidence> is a better language (it’s not, but the differences are too minor to matter) but because he knows it better. Etc. What <evidence type='experience'>we</evidence>
        <evidence type='experience' specific-type='verb-events'>ended</evidence> up <evidence type='experience' specific-type='verb-events'>doing</evidence> with the interns <evidence type='experience' specific-type='verb-events'>was</evidence> just <evidence type='experience' specific-type='verb-events'>telling</evidence> them that <evidence type='experience' specific-type='pronoun'>they</evidence><evidence type='experience' specific-type='verb-events'>had</evidence> to <evidence type='experience' specific-type='verb-events'>build</evidence> it in C# and ASP.NET. 
In particular, one intern, who <evidence type='experience' specific-type='verb-events'>wrote</evidence> the website part of <evidence type='experience' specific-type='named-entity'>Copilot</evidence>, <evidence type='experience' specific-type='verb-events'>had</evidence> enough <evidence type='experience'>experience</evidence> with ASP.NET to <evidence type='experience' specific-type='verb-events'>know</evidence> what things to <evidence type='experience' specific-type='verb-events'>avoid</evidence> (like viewstate) and knew to <evidence type='experience' specific-type='verb-events'>avoid</evidence> the gotchas that <evidence type='experience' specific-type='verb-events'>make</evidence> it impossible to <evidence type='experience' specific-type='verb-events'>have</evidence> two in one page, etc. etc., so he <evidence type='experience' specific-type='verb-events'>did</evidence> a beautiful job <evidence type='experience' specific-type='verb-events'>architecting</evidence> the ASP.NET code exactly the right way to <evidence type='experience' specific-type='verb-events'>begin</evidence> with so <evidence type='experience'>we</evidence> didn’t <evidence type='experience' specific-type='verb-events'>get</evidence> into trouble later. And the benefit <evidence type='experience' specific-type='verb-events'>was</evidence> that not one minute <evidence type='experience' specific-type='verb-events'>was</evidence> spent <evidence type='experience' specific-type='verb-events'>debating</evidence> the merits of <evidence type='experience' specific-type='verb-events'>programming</evidence> languages, a fruitless <evidence type='experience' specific-type='verb-events'>debate</evidence> if I’ve ever seen one. 
Finally — as to what <evidence type='experience'>we</evidence>
        <evidence type='experience' specific-type='verb-events'><evidence type='experience' specific-type='verb-events'>use/evidence></evidence> — <evidence type='experience' specific-type='named-entity'>Copilot</evidence> is C# and ASP.Net, as <evidence type='experience'>I</evidence>
        <evidence type='experience'  specific-type='verb-events'>mentioned</evidence>, <argumentation type="reasoning">although</argumentation> the Windows client is written in C++. 
Our older in-house code is VBScript and <evidence type='experience'>our</evidence> newer in-house code is C#. 
        <evidence type='experience'  specific-type='named-entity'>FogBugz</evidence> is written in <evidence type='experience' specific-type='named-entity'>Wasabi</evidence>, a very advanced, functional-<evidence type='experience' specific-type='verb-events'>programming</evidence> dialect of <evidence type='experience' specific-type='named-entity'>Basic</evidence> with closures and lambdas and <evidence type='experience' specific-type='named-entity'>Rails</evidence>-like active records that can <evidence type='experience' specific-type='verb-events'>be</evidence> compiled down to VBScript, <evidence type='experience' specific-type='named-entity'>Java</evidence>Script, <evidence type='experience' specific-type='named-entity'>PHP</evidence>4 or <evidence type='experience' specific-type='named-entity'>PHP</evidence>5. 
<evidence type='experience'  specific-type='named-entity'>Wasabi</evidence> is a private, in-house language written by one of <evidence type='experience'>our</evidence> best developers that is optimized specifically for <evidence type='experience' specific-type='verb-events'>developing</evidence><evidence type='experience' specific-type='named-entity'>FogBugz</evidence>; the <evidence type='experience' specific-type='named-entity'>Wasabi</evidence> compiler itself is written in C#.
Subscribe!
You’re reading <evidence type='experience'  specific-type='named-entity'>Joel</evidence> on <evidence type='experience' specific-type='named-entity'>Software</evidence>, stuffed with years and years of completely <evidence type='experience' specific-type='verb-events'>raving</evidence> mad articles about <evidence type='experience' specific-type='named-entity'>Software</evidence> development, <evidence type='experience' specific-type='verb-events'>managing</evidence><evidence type='experience' specific-type='named-entity'>Software</evidence> teams, <evidence type='experience' specific-type='verb-events'>designing</evidence> user interfaces, <evidence type='experience' specific-type='verb-events'>running</evidence> successful <evidence type='experience' specific-type='named-entity'>Software</evidence> companies, and <evidence type='experience' specific-type='verb-events'>rubber</evidence> duckies. 
If <evidence type='experience'  specific-type='pronoun'>you</evidence> want to <evidence type='experience' specific-type='verb-events'>know</evidence><evidence type='experience' specific-type='timex-events'>when</evidence>
<evidence type='experience'>I</evidence> publish something new, <evidence type='experience'>I</evidence>
        <evidence type='experience' specific-type='verb-events'>recommend</evidence><evidence type='experience' specific-type='verb-events'>getting</evidence> an RSS reader like <evidence type='experience' specific-type='named-entity'>Newsblur</evidence> and <evidence type='experience' specific-type='verb-events'>subscribing</evidence> to <evidence type='experience'>my</evidence> RSS feed.
About the author.
        <evidence type='experience' specific-type='timex-events'>In 2000</evidence>
<evidence type='experience'>I</evidence> co-<evidence type='experience' specific-type='verb-events'>founded</evidence><evidence type='experience' specific-type='named-entity'>Fog Creek</evidence><evidence type='experience' specific-type='named-entity'>Software</evidence>, where <experience type='experience'>we</experience>
        <evidence type='experience' specific-type='verb-events'>created</evidence> lots of cool things like the <evidence type='experience' specific-type='named-entity'>FogBugz</evidence> bug tracker, Trello, and Glitch. <evidence type='experience'>I</evidence> also <evidence type='experience' specific-type='verb-events'>worked</evidence> with <evidence type='experience' specific-type='named-entity'>Jeff</evidence><evidence type='experience' specific-type='named-entity'>Atwood</evidence> to create <evidence type='experience' specific-type='named-entity'>Stack</evidence><evidence type='experience' specific-type='named-entity'>Overflow</evidence> and <evidence type='experience' specific-type='verb-events'>served</evidence> as CEO of <evidence type='experience' specific-type='named-entity'>Stack</evidence><evidence type='experience' specific-type='named-entity'>Overflow</evidence> from 2010-2019.
Today <evidence type='experience'>I</evidence> serve as the chairman of the board for <evidence type='experience' specific-type='named-entity'>Stack</evidence><evidence type='experience' specific-type='named-entity'>Overflow</evidence>, Glitch, and <evidence type='experience' specific-type='named-entity'>HASH</evidence>.
Post navigation
← Previous Post <evidence type='experience'>My</evidence> three favorite Firefox extensions Next Post → <evidence type='experience' specific-type='named-entity'>Wasabi</evidence> Proudly powered by <evidence type='experience' specific-type='named-entity'>WordPress</evidence>
</article>evidence